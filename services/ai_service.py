"""
Servi√ßo de integra√ß√£o com Grok (xAI) para processamento de linguagem natural
ATUALIZADO COM BASE DE CONHECIMENTO COMPLETA V2.0
"""
import requests
import logging
import base64
from config.settings import Config

# Importa TODA a base de conhecimento expandida
try:
    from knowledge.comprehensive_knowledge_base import (
        RESINAS_QUANTON3D,
        IMPRESSORAS_SUPORTADAS,
        FUNDAMENTOS_SLA_DLP,
        recomendar_parametros,
        buscar_resina,
        buscar_impressora
    )
    from knowledge.comprehensive_errors_database import (
        ERROS_CATEGORIA_1,
        ERROS_CATEGORIA_2,
        ERROS_CATEGORIA_3,
        ERROS_CATEGORIA_4,
        ERROS_CATEGORIA_5,
        buscar_erro_por_sintoma
    )
    from knowledge.advanced_errors_extended import (
        ERROS_CATEGORIA_6,
        ERROS_CATEGORIA_7,
        ERROS_CATEGORIA_8,
        ERROS_CATEGORIA_9,
        ERROS_CATEGORIA_10,
        ERROS_CATEGORIA_11,
        buscar_erro_avancado
    )
    BASE_COMPLETA_CARREGADA = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ Base de Conhecimento Botellio v2.0 carregada - 100+ erros catalogados!")
except ImportError as e:
    # Fallback para base antiga se a nova falhar
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel carregar base expandida: {e}")
    logger.warning("Usando base de conhecimento original como fallback...")
    from knowledge.resins_database import (
        get_resin_config,
        get_resin_properties,
        get_problem_solution,
        list_available_resins,
        list_available_printers,
        list_printer_models,
        COMMON_PROBLEMS
    )
    BASE_COMPLETA_CARREGADA = False


class AIService:
    """Servi√ßo para interagir com a API do Grok (xAI) - VERS√ÉO 2.0 COM BASE COMPLETA"""
    
    def __init__(self):
        self.api_key = Config.GROK_API_KEY
        self.model = Config.GROK_MODEL  # grok-beta ou grok-vision-beta
        self.base_url = "https://api.x.ai/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        # System prompt ATUALIZADO com conhecimento COMPLETO sobre Quanton3D
        self.system_prompt = """
Voc√™ √© Botellio, o assistente virtual especializado em suporte t√©cnico para impress√£o 3D SLA da Quanton3D.

**Sobre a Quanton3D:**
A Quanton3D √© uma empresa brasileira especializada na fabrica√ß√£o de resinas UV de alta qualidade para impress√£o 3D SLA/DLP. 
Oferecemos uma linha completa de resinas para diversas aplica√ß√µes: miniaturas, prot√≥tipos, pe√ßas funcionais, joias, odontologia e muito mais.

**Suas responsabilidades:**
1. Fornecer suporte t√©cnico especializado sobre impress√£o 3D SLA/DLP/LCD
2. Ajudar com configura√ß√µes de impress√£o para resinas Quanton3D
3. Diagnosticar problemas comuns e avan√ßados de impress√£o
4. Recomendar as melhores resinas para cada aplica√ß√£o
5. Orientar sobre p√≥s-processamento e cura de pe√ßas
6. Analisar imagens de problemas de impress√£o

**Linha COMPLETA de resinas Quanton3D (10 resinas):**
1. **PYROBLAST**: Alta performance, excelente acabamento superficial
2. **IRON 7620**: Resist√™ncia mec√¢nica EXTREMA, ideal para pe√ßas funcionais
3. **IRON**: Robusta com boa resist√™ncia ao impacto
4. **SPIN**: Cura r√°pida com √≥timo acabamento
5. **POSEIDON**: Resistente √† √°gua e umidade
6. **RPO 4K**: Otimizada para impressoras de alta resolu√ß√£o
7. **SPARK**: Cura ULTRA-R√ÅPIDA, ideal para produ√ß√£o em massa
8. **FLEXFORM**: Flex√≠vel e el√°stica, Shore A 70-80
9. **ALCHEMIST**: Premium com acabamento excepcional
10. **LOWSMELL**: Baixo odor para ambientes fechados

**Impressoras compat√≠veis (20+ modelos):**
- **ANYCUBIC**: Photon Mono, Photon Mono X, Photon M3, Photon M5S
- **ELEGOO**: Mars 3, Mars 4 Ultra, Saturn 2
- **CREALITY**: LD-002R, Halot One
- **PHROZEN**: Sonic Mini 4K

**BASE DE CONHECIMENTO EXPANDIDA:**
- ‚úÖ 100+ erros catalogados em 11 categorias
- ‚úÖ Diagn√≥stico em 3 etapas para cada problema
- ‚úÖ Fundamentos t√©cnicos de SLA/DLP/LCD
- ‚úÖ Par√¢metros otimizados por resina e impressora
- ‚úÖ P√≥s-processamento avan√ßado
- ‚úÖ Manuten√ß√£o preventiva

**ESTRUTURA DE RESPOSTA OBRIGAT√ìRIA (3 ETAPAS):**

Quando o usu√°rio relatar um problema, SEMPRE responda seguindo EXATAMENTE esta estrutura:

üîç **DIAGN√ìSTICO PRIM√ÅRIO:**
[Identifique a causa raiz mais prov√°vel do problema com base nos sintomas descritos. Seja espec√≠fico e t√©cnico.]

üõ† **SOLU√á√ÉO IMEDIATA:**
[Forne√ßa 1-3 a√ß√µes r√°pidas e pr√°ticas que o usu√°rio pode fazer AGORA para tentar resolver o problema. Passos numerados e objetivos.]

‚öô **PROTOCOLO AVAN√áADO:**
[Liste 5-10 passos detalhados para preven√ß√£o m√°xima e otimiza√ß√£o, incluindo configura√ß√µes espec√≠ficas, valores num√©ricos e procedimentos t√©cnicos.]

**Categorias de Erros Catalogados:**
1. **Problemas Cr√≠ticos de Ades√£o e Nivelamento** (Categoria 1)
2. **Falhas no Corpo da Pe√ßa (Cura e Delamina√ß√£o)** (Categoria 2)
3. **Problemas de Resina, Tanque e P√≥s-Processamento** (Categoria 3)
4. **Problemas Cr√≠ticos de Suportes e Estruturas** (Categoria 4)
5. **Problemas Avan√ßados de Qualidade e Precis√£o** (Categoria 5)
6. **Problemas Eletr√¥nicos e de Hardware** (Categoria 6)
7. **Problemas Ambientais Extremos** (Categoria 7)
8. **Problemas de Software e Arquivo** (Categoria 8)
9. **Problemas Espec√≠ficos por Tipo de Resina** (Categoria 9)
10. **P√≥s-Processamento Avan√ßado** (Categoria 10)
11. **Problemas Mec√¢nicos Avan√ßados** (Categoria 11)

**Seu tom de voz:**
- Profissional mas amig√°vel e acolhedor
- T√©cnico quando necess√°rio, mas sempre acess√≠vel
- Sempre prestativo e extremamente paciente
- Foco total em resolver o problema do cliente
- Use emojis estrategicamente para tornar a resposta mais visual e amig√°vel
- Seja emp√°tico com a frustra√ß√£o do usu√°rio

**Quando n√£o souber algo:**
- Seja honesto sobre limita√ß√µes
- Ofere√ßa agendar suporte t√©cnico personalizado
- Priorize clientes que usam resinas Quanton3D
- Nunca invente informa√ß√µes t√©cnicas

**An√°lise de Imagens:**
Quando receber uma imagem, analise cuidadosamente:
- Identifique problemas vis√≠veis (camadas, deforma√ß√µes, falhas)
- Relacione com os 100+ erros catalogados
- Forne√ßa diagn√≥stico em 3 etapas
- Seja espec√≠fico sobre o que voc√™ v√™ na imagem
"""
    
    def _build_knowledge_context(self, user_message):
        """
        Constr√≥i contexto adicional baseado na BASE DE CONHECIMENTO COMPLETA V2.0
        
        Args:
            user_message (str): Mensagem do usu√°rio
            
        Returns:
            str: Contexto adicional relevante
        """
        context_parts = []
        
        if not BASE_COMPLETA_CARREGADA:
            # Fallback para base antiga
            return self._build_knowledge_context_old(user_message)
        
        # Detecta men√ß√£o a resinas Quanton3D
        for resin_key, resin_data in RESINAS_QUANTON3D.items():
            resin_name = resin_data["nome"]
            if resin_name.lower() in user_message.lower() or resin_key.lower() in user_message.lower():
                context_parts.append(f"\n**üì¶ Informa√ß√µes sobre {resin_name}:**")
                context_parts.append(f"- Descri√ß√£o: {resin_data['descricao']}")
                context_parts.append(f"- Aplica√ß√µes: {', '.join(resin_data['aplicacoes'])}")
                context_parts.append(f"- Cores: {', '.join(resin_data['cores_disponiveis'])}")
                context_parts.append(f"- Dureza Shore: {resin_data['propriedades']['dureza_shore']}")
                context_parts.append(f"- Resist√™ncia √† tra√ß√£o: {resin_data['propriedades']['resistencia_tracao']}")
                context_parts.append(f"- Alongamento: {resin_data['propriedades']['alongamento']}")
                break
        
        # Detecta men√ß√£o a impressoras
        for brand_key, brand_data in IMPRESSORAS_SUPORTADAS.items():
            if brand_data["nome"].lower() in user_message.lower():
                context_parts.append(f"\n**üñ®Ô∏è Impressoras {brand_data['nome']} suportadas:**")
                context_parts.append(f"Modelos: {', '.join(brand_data['modelos'].keys())}")
                break
        
        # Busca erros por sintomas (TODAS as 11 categorias)
        sintomas_detectados = []
        
        # Categoria 1-5 (comprehensive_errors_database)
        erro_encontrado = buscar_erro_por_sintoma(user_message)
        if erro_encontrado:
            sintomas_detectados.append(erro_encontrado)
        
        # Categoria 6-11 (advanced_errors_extended)
        erro_avancado = buscar_erro_avancado(user_message)
        if erro_avancado:
            sintomas_detectados.append(erro_avancado)
        
        # Adiciona informa√ß√µes dos erros encontrados
        for erro in sintomas_detectados:
            context_parts.append(f"\n**‚ö†Ô∏è Problema identificado: {erro['nome']}**")
            context_parts.append(f"Categoria: {erro['categoria']}")
            context_parts.append(f"\n{erro['diagnostico_primario']}")
            context_parts.append(f"\n{erro['solucao_imediata']}")
            # N√£o adiciona protocolo avan√ßado aqui para n√£o poluir o contexto
        
        return "\n".join(context_parts) if context_parts else ""
    
    def _build_knowledge_context_old(self, user_message):
        """
        Fallback para base de conhecimento antiga
        """
        context_parts = []
        
        # Detecta men√ß√£o a resinas (base antiga)
        for resin in list_available_resins():
            if resin.lower() in user_message.lower() or resin.replace("_", " ").lower() in user_message.lower():
                props = get_resin_properties(resin)
                if props:
                    context_parts.append(f"\n**Informa√ß√µes sobre {resin}:**")
                    context_parts.append(f"- Descri√ß√£o: {props['descricao']}")
                    context_parts.append(f"- Aplica√ß√µes: {', '.join(props['aplicacoes'])}")
                    context_parts.append(f"- Cores dispon√≠veis: {', '.join(props['cor_disponivel'])}")
                    context_parts.append(f"- Dureza Shore: {props['dureza_shore']}")
                    context_parts.append(f"- Resist√™ncia √† tra√ß√£o: {props['resistencia_tracao']}")
        
        # Detecta problemas comuns (base antiga)
        problem_keywords = {
            "camadas": "camadas_visiveis",
            "linhas": "camadas_visiveis",
            "n√£o adere": "peca_nao_adere",
            "nao adere": "peca_nao_adere",
            "descolou": "peca_nao_adere",
            "quebra": "peca_quebra_facilmente",
            "fr√°gil": "peca_quebra_facilmente",
            "fragil": "peca_quebra_facilmente",
            "deformou": "deformacao",
            "empenado": "deformacao",
            "pegajosa": "superficie_pegajosa",
            "grudenta": "superficie_pegajosa"
        }
        
        for keyword, problem_key in problem_keywords.items():
            if keyword in user_message.lower():
                problem = get_problem_solution(problem_key)
                if problem:
                    context_parts.append(f"\n**Problema identificado: {problem['descricao']}**")
                    context_parts.append(f"Causas comuns:")
                    for causa in problem['causas']:
                        context_parts.append(f"  - {causa}")
                    context_parts.append(f"Solu√ß√µes recomendadas:")
                    for solucao in problem['solucoes']:
                        context_parts.append(f"  - {solucao}")
                break
        
        return "\n".join(context_parts) if context_parts else ""
    
    def get_response(self, prompt, context=None, max_tokens=800, temperature=0.7):
        """
        Gera uma resposta usando o modelo Grok com BASE DE CONHECIMENTO COMPLETA
        
        Args:
            prompt (str): A pergunta ou comando do usu√°rio
            context (list): Hist√≥rico da conversa (opcional)
            max_tokens (int): N√∫mero m√°ximo de tokens na resposta (aumentado para 800)
            temperature (float): Criatividade da resposta (0.0 a 1.0)
            
        Returns:
            str: Resposta gerada pela IA
        """
        messages = [{"role": "system", "content": self.system_prompt}]
        
        # Adiciona contexto da base de conhecimento COMPLETA
        knowledge_context = self._build_knowledge_context(prompt)
        if knowledge_context:
            messages.append({"role": "system", "content": f"üìö Informa√ß√µes relevantes da base de conhecimento:\n{knowledge_context}"})
        
        # Adiciona o contexto da conversa, se houver
        if context:
            messages.extend(context)
        
        # Adiciona o prompt do usu√°rio
        messages.append({"role": "user", "content": prompt})
        
        payload = {
            "model": self.model,
            "messages": messages,
            "max_tokens": max_tokens,
            "temperature": temperature,
            "stream": False
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            data = response.json()
            answer = data['choices'][0]['message']['content'].strip()
            logger.info(f"‚úÖ Resposta do Grok gerada com sucesso (Base Completa v2.0).")
            return answer
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erro ao chamar a API do Grok: {e}")
            raise
        except (KeyError, IndexError) as e:
            logger.error(f"‚ùå Erro ao processar resposta do Grok: {e}")
            raise
    
    def get_resin_configuration(self, resin_name, printer_brand, printer_model):
        """
        Busca configura√ß√£o espec√≠fica de uma resina para uma impressora
        ATUALIZADO PARA USAR BASE COMPLETA
        
        Args:
            resin_name (str): Nome da resina
            printer_brand (str): Marca da impressora
            printer_model (str): Modelo da impressora
            
        Returns:
            dict: Configura√ß√µes ou None se n√£o encontrado
        """
        if BASE_COMPLETA_CARREGADA:
            return recomendar_parametros(printer_model, resin_name)
        else:
            # Fallback para base antiga
            return get_resin_config(resin_name.upper(), printer_brand.upper(), printer_model.upper())
    
    def classify_problem(self, message):
        """
        Classifica o problema do usu√°rio em b√°sico, intermedi√°rio ou complexo
        ATUALIZADO COM 11 CATEGORIAS DE ERROS
        
        Args:
            message (str): Mensagem do usu√°rio
            
        Returns:
            str: Categoria do problema ("b√°sico", "intermedi√°rio", "complexo")
        """
        classification_prompt = """
        Voc√™ √© um especialista em suporte t√©cnico para impressoras 3D SLA com acesso a 100+ erros catalogados. 
        Classifique a seguinte mensagem de usu√°rio em uma das tr√™s categorias:
        
        - "b√°sico": Problemas comuns e f√°ceis de resolver (ex: configura√ß√µes, d√∫vidas sobre resinas, problemas conhecidos com solu√ß√£o r√°pida).
        - "intermedi√°rio": Problemas que exigem mais investiga√ß√£o (ex: diagn√≥stico de hardware, otimiza√ß√£o avan√ßada, erros de m√∫ltiplas causas).
        - "complexo": Problemas que precisam de an√°lise visual ou interven√ß√£o humana especializada (ex: posicionamento de suportes, erros complexos de hardware, problemas ambientais).
        
        Responda apenas com a categoria em letra min√∫scula.
        """
        
        payload = {
            "model": self.model,
            "messages": [
                {"role": "system", "content": classification_prompt},
                {"role": "user", "content": message}
            ],
            "max_tokens": 10,
            "temperature": 0.0
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            data = response.json()
            category = data['choices'][0]['message']['content'].strip().lower()
            logger.info(f"‚úÖ Problema classificado como: {category}")
            return category
        except Exception as e:
            logger.error(f"‚ùå Erro ao classificar problema: {e}")
            # Retorna categoria padr√£o em caso de erro
            return "intermedi√°rio"
    
    def analyze_image(self, image_data, prompt=None):
        """
        Analisa uma imagem em busca de problemas de impress√£o 3D
        ATUALIZADO COM REFER√äNCIA A 100+ ERROS CATALOGADOS
        
        Args:
            image_data (bytes): Dados bin√°rios da imagem
            prompt (str): Pergunta espec√≠fica sobre a imagem (opcional)
            
        Returns:
            str: An√°lise da imagem em 3 etapas
        """
        # Converte imagem para base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        # Prompt padr√£o para an√°lise de imagens COM ESTRUTURA EM 3 ETAPAS
        if not prompt:
            prompt = """
Analise esta imagem de uma pe√ßa impressa em 3D com resina SLA/DLP da Quanton3D.

Voc√™ tem acesso a uma base de conhecimento com 100+ erros catalogados em 11 categorias.

FORNE√áA SUA AN√ÅLISE SEGUINDO EXATAMENTE ESTA ESTRUTURA:

üîç **DIAGN√ìSTICO PRIM√ÅRIO:**
[Identifique o problema vis√≠vel na imagem e sua causa raiz mais prov√°vel]

üõ† **SOLU√á√ÉO IMEDIATA:**
[Forne√ßa 1-3 a√ß√µes r√°pidas que o usu√°rio pode fazer AGORA]

‚öô **PROTOCOLO AVAN√áADO:**
[Liste 5-10 passos detalhados para preven√ß√£o e otimiza√ß√£o]

Seja espec√≠fico, t√©cnico e visual na sua an√°lise. Mencione exatamente o que voc√™ v√™ na imagem.
"""
        
        payload = {
            "model": "grok-vision-beta",  # Modelo com suporte a vis√£o
            "messages": [
                {
                    "role": "system",
                    "content": "Voc√™ √© Botellio, especialista em impress√£o 3D SLA/DLP da Quanton3D com acesso a 100+ erros catalogados. Analise imagens e forne√ßa diagn√≥stico em 3 etapas."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}",
                            },
                        },
                    ],
                }
            ],
            "max_tokens": 800,
            "temperature": 0.3
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json=payload,
                timeout=60
            )
            response.raise_for_status()
            
            data = response.json()
            analysis = data['choices'][0]['message']['content'].strip()
            logger.info("‚úÖ An√°lise de imagem conclu√≠da com sucesso (Base Completa v2.0).")
            return analysis
        except Exception as e:
            logger.error(f"‚ùå Erro ao analisar imagem: {e}")
            return "Desculpe, tive um problema ao analisar a imagem. Por favor, descreva o problema que voc√™ est√° vendo e tentarei ajudar da melhor forma poss√≠vel. üôè"

