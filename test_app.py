#!/usr/bin/env python3
"""
Script de teste para validar o funcionamento do Botellio
"""
import sys
import os

# Adiciona o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from flask import Flask
        print("  ‚úÖ Flask")
    except ImportError as e:
        print(f"  ‚ùå Flask: {e}")
        return False
    
    try:
        from config import get_config
        print("  ‚úÖ Config")
    except ImportError as e:
        print(f"  ‚ùå Config: {e}")
        return False
    
    try:
        from database import init_db
        print("  ‚úÖ Database")
    except ImportError as e:
        print(f"  ‚ùå Database: {e}")
        return False
    
    try:
        from services.ai_service import AIService
        print("  ‚úÖ AI Service")
    except ImportError as e:
        print(f"  ‚ùå AI Service: {e}")
        return False
    
    try:
        from services.whatsapp_service import WhatsAppService
        print("  ‚úÖ WhatsApp Service")
    except ImportError as e:
        print(f"  ‚ùå WhatsApp Service: {e}")
        return False
    
    try:
        from services.knowledge_base import KnowledgeBaseService
        print("  ‚úÖ Knowledge Base")
    except ImportError as e:
        print(f"  ‚ùå Knowledge Base: {e}")
        return False
    
    return True

def test_config():
    """Testa se as configura√ß√µes est√£o corretas"""
    print("\n‚öôÔ∏è  Testando configura√ß√µes...")
    
    from config import get_config
    config = get_config()
    
    # Testa vari√°veis obrigat√≥rias
    if not config.GROK_API_KEY or config.GROK_API_KEY == 'sua-chave-grok-aqui':
        print("  ‚ö†Ô∏è  GROK_API_KEY n√£o configurada")
    else:
        print("  ‚úÖ GROK_API_KEY configurada")
    
    if not config.WHATSAPP_API_TOKEN or config.WHATSAPP_API_TOKEN == 'seu-token-whatsapp-aqui':
        print("  ‚ö†Ô∏è  WHATSAPP_API_TOKEN n√£o configurada")
    else:
        print("  ‚úÖ WHATSAPP_API_TOKEN configurada")
    
    if not config.DATABASE_URL:
        print("  ‚ö†Ô∏è  DATABASE_URL n√£o configurada (OK para desenvolvimento)")
    else:
        print("  ‚úÖ DATABASE_URL configurada")
    
    return True

def test_app_creation():
    """Testa se a aplica√ß√£o pode ser criada"""
    print("\nüöÄ Testando cria√ß√£o da aplica√ß√£o...")
    
    try:
        from app import app
        print("  ‚úÖ Aplica√ß√£o criada com sucesso")
        
        # Testa rotas principais
        with app.test_client() as client:
            response = client.get('/')
            if response.status_code == 200:
                print("  ‚úÖ Rota '/' funcionando")
            else:
                print(f"  ‚ùå Rota '/' retornou status {response.status_code}")
            
            response = client.get('/health')
            if response.status_code == 200:
                print("  ‚úÖ Rota '/health' funcionando")
            else:
                print(f"  ‚ùå Rota '/health' retornou status {response.status_code}")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Erro ao criar aplica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("ü§ñ BOTELLIO - TESTES DE VALIDA√á√ÉO")
    print("=" * 60)
    
    success = True
    
    # Executa testes
    success = test_imports() and success
    success = test_config() and success
    success = test_app_creation() and success
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("\nO Botellio est√° pronto para uso!")
        print("\nPara iniciar o servidor:")
        print("  python app.py")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("\nVerifique os erros acima e corrija antes de continuar.")
    print("=" * 60)
    
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())
